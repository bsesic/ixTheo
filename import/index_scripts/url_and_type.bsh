import org.marc4j.marc.DataField;
import org.marc4j.marc.Record;
import org.marc4j.marc.Subfield;

import java.util.*;

Map translations = new HashMap();

translations.put("Inhaltsverzeichnis", "TOC");
translations.put("Klappentext", "blurb");
translations.put("Rezension", "review");
translations.put("Cover", "cover");
translations.put("Inhaltstext", "contents");
translations.put("Verlagsinformation", "publisher information");
translations.put("Ausf√ºhrliche Beschreibung", "detailed description");
translations.put("Unbekanntes Material", "unknown material type");

String subfieldsToTest = "3yzx";


/**
 * Returns a Set<String> of parent (URL + colon + material type).  URLs are taken from 856u and material
 * types from 8563, 856z or 856x.  For missing type subfields the text "Unbekanntes Material" will be used.
 *
 * @return  A, possibly empty, Set<String> containing the URL/material-type pairs.
 */
public Set getUrlsAndMaterialTypes(Record record) {
    Set urls_and_material_types = new LinkedHashSet();
    String material_type, translated_material_type;
    Subfield subfield;
    for (DataField field : record.getVariableFields("856")) {
	if (field.getSubfield('u') == null) {
	   // No URL, nothing to do.
	   continue;
	}

	// Find right field for the link label.
	material_type = "unknown material type";
	for (char subfieldIdentifier : subfieldsToTest.toCharArray()) {
	    subfield = field.getSubfield(subfieldIdentifier);
	    if (subfield != null) {
	       material_type = normalizeMaterialType(subfield.getData());
	       break;
	    }
	}

	// Translate the german link label to english.
	translated_material_type = translations.get(material_type);
	if (translated_material_type == null) {
	   print("ID: " + record.getControlNumber()  + " Unknown material type: " + material_type);
	   translated_material_type = "unknown material type";
	}

	// Create a result for each url.
	for (Subfield subfield_u : field.getSubfields('u'))
	    urls_and_material_types.add(subfield_u.getData() + ":" + translated_material_type);
    }

    return urls_and_material_types;
}

/**
 * There are many different material types.
 * This is for reducing the number of unknown material types by extracting known material types.
 */
private String normalizeMaterialType(material_type) {
	if (material_type.startsWith("Rezension")) {
	   return "Rezension";
	}
	return material_type;
}
