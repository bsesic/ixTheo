/**
 * Custom date script.
 *
 * This can be used to override built-in SolrMarc custom functions.  If you change
 * this script, you will need to activate it in import/marc_local.properties before
 * it will be applied during indexing.
 */
import org.marc4j.marc.*;

Map /*<String, String>*/ replacements = new HashMap();

// delete commas at the end
replacements.put(",$", "");
// delete comments
replacements.put("\\[(.*)\\]", "");
// Substitute dopple spaces to single spaces
replacements.put("  ", "  ");
// insert space after a period if doesn't exists.
replacements.put("\\.(?!\\s)", ". ");

// Replace some abbreviation:
replacements.put("u\\.", "und");
// replacements.put("&", "und");

replacements.put("Univ\\.-Verl", "Universitätsverlag");
replacements.put("Verl\\.-Haus", "Verlagshaus");
replacements.put("Verl\\.", "Verlag");
replacements.put("Verl$", "Verlag");

replacements.put("Akad$", "Akademie");
replacements.put("Akadem\\.", "Akademie");
replacements.put("Akade\\.", "Akademie");
replacements.put("Akad\\.", "Akademie");
replacements.put("Acad\\.", "Academy");

replacements.put("Verlag-Anst", "Verlagshaus");
replacements.put("Anst$", "Anstalt");
replacements.put("anst$", "anstalt");

replacements.put("Kathol\\.", "Katholische");
replacements.put("Evang\\.", "Evangelische");
replacements.put("Ev\\.", "Evangelische");

replacements.put("Pr$", "Press");
replacements.put("Pr\\.", "Press");

replacements.put("", "Press");
replacements.put("Pr\\.", "Press");

replacements.put("^Priv\\.", "Privilegierte");
replacements.put("^Privileg\\.", "Privilegierte");

replacements.put("Württ\\.", "Württembergische");
replacements.put("Württemb\\.", "Württembergische");

replacements.put("ges\\.", "gesellschaft");
replacements.put("ges$", "gesellschaft");
replacements.put("Ges\\.", "Gesellschaft");
replacements.put("Ges$", "Gesellschaft");

replacements.put("Inst\\.", "Institution");

replacements.put("Internat$", "International");
replacements.put("T&T", "International");

replacements.put("Wiss$", "Wissenschaft");

replacements.put("Univ\\. of", "University of");
replacements.put("Univ\\.-Bibliothek", "Universitätsbibliothek");

replacements.put("^1st ", "1st. ");
replacements.put(" Fd ", " Field ");
replacements.put(" Fd\\. ", " Field ");
replacements.put(" Svy ", " Survey ");
replacements.put(" Regt", " Regiment");
replacements.put(" Regt\\.", " Regiment");
replacements.put("RE$", " R. E.");


replacements.put("Calif.", "California");

print(replacements);

/**
 * Get all available publishers from the record.
 *
 * @param  Record          record
 * @return Set             publishers
 */
public Set getPublishers(Record record) {
    Set rawPublishers = getRawPublishers(record);
    Set publishers = new LinkedHashSet();

    for (String publisher : rawPublishers) {
        publisher = publisher.trim();
        for (Map.Entry replacement : replacements.entrySet()) {
            publisher = publisher.replaceAll(replacement.getKey(), replacement.getValue());
        }
        publisher = publisher.trim();

        if (!publisher.isEmpty()) {
           publishers.add(publisher);
        }
    }
    return publishers;
}


public Set getRawPublishers(Record record) {
    Set publishers = new LinkedHashSet();

    // First check old-style 260b name:
    List list260 = record.getVariableFields("260");
    for (VariableField vf : list260)
    {
        DataField df = (DataField) vf;
        Subfield current = df.getSubfield('b');
        if (current != null) {
            publishers.add(current.getData());
        }
    }

    // Now track down relevant RDA-style 264b names; we only care about
    // copyright and publication names (and ignore copyright names if
    // publication names are present).
    Set pubNames = new LinkedHashSet();
    Set copyNames = new LinkedHashSet();
    List list264 = record.getVariableFields("264");
    for (VariableField vf : list264)
    {
        DataField df = (DataField) vf;
        Subfield currentName = df.getSubfield('b');
        if (currentName != null) {
            char ind2 = df.getIndicator2();
            switch (ind2)
            {
                case '1':
                    pubNames.add(currentName.getData());
                    break;
                case '4':
                    copyNames.add(currentName.getData());
                    break;
            }
        }
    }
    if (pubNames.size() > 0) {
        publishers.addAll(pubNames);
    } else if (copyNames.size() > 0) {
        publishers.addAll(copyNames);
    }

    return publishers;
}